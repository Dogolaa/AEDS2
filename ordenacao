#include <cstdlib>
#include <iostream>


using namespace std;

int inst = 0, tamanho;
int *z;

void debug( int p, int r, int v[]){
    inst++;
    cout << endl << "  " << inst  << " instancia p = " << p << " r = " << r << " -> ";
    for (z = v; z < v + tamanho; z++)
        cout << *z << " ";
} 

int separa(int v[], int p, int r){
    int c = v[r];
    int temp, j = p;
    for (int k = p; k < r; k++)
        if (v[k] <= c){
            temp = v[j];
            v[j] = v [k];
            v[k] = temp;
            ++j;
        }
    v[r] = v[j];
    v[j] = c;
    return j;
}

void intercala1( int p, int q , int r, int v[]){
    int *w;
    w = (int *)malloc((r-p) * sizeof (int));
    int i = p, j = q;
    int k = 0;
    while (i < q && j < r){
        if(v[i] <= v[j])
            w[k++] = v [i++];
        else 
            w[k++] = v [j++];
    }
    while ( i < q)
        w[k++] = v[i++];
    while (j < r)
        w[k++] = v[j++];
    for (i = p; i < r; i++)
        v[i] = w [i-p];
    free(w);
    
}

void mergesort (int p, int r, int v[]){
    if (p < r -1 ){
        int q = (p + r)/2;
        mergesort(p,q,v);
        mergesort(q,r,v);
        intercala1(p,q,r,v);
    }
}

void quicksort(int v[], int p, int r){
    if (p < r){
        int j = separa(v,p,r);
        quicksort (v,p,j-1);
        quicksort (v,j+1,r);
    }
    debug(0,10,v);
    
}





void imprimevetor(int *v){
    cout << endl;
    for (int *p = v; p < v+10; p++){
        cout << "  " << *p;
        cout << endl;
    }
}


int* inicializa(int tam){
  int *v = (int *)malloc(tam*sizeof(int));
  int *p;
    srand(time(NULL));
    for ( p = v; p < v + tam; p++){
        *p = rand() % 100;
    }
    return v;
}

int main(int argc, char**argv) {
    int a[4] = {0 , 3 , 4 , 7 };
    int b[6] = {1, 2, 5 , 6 , 8, 9};
    int c[10];
    int i = 0, k = 0, j = 0, *v;
    
    while (i < 4 && j < 6){
        if(a[i]  < b[j]){
            c[k] = a[i];
            i++;
            k++;        
        }
        else{
            c[k] = b[j];
            j++;
            k++;
        }
    }
    
    if (i < 4)
        while ( i < 4){
        c[k]= a[i];
        i++;
        k++;
        }
    
    if (j < 6)
        while ( j < 6){
        c[k]= b[j];
        j++;
        k++;
        }
    
    
    
    
    v = inicializa(10);
    imprimevetor(v);
    //mergesort(0,10,v);
    quicksort(v,0,9);
    imprimevetor(v);
    
    return 0;
}
